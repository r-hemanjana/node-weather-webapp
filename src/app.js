const express = require('express')
const path = require('path')
const hbs = require('hbs')
const forecast = require('./utils/forecast')
const geocode = require('./utils/geocode') 

//__dirname & __filenme is provied by wrapper functioin , you saw it when we debug node.js code in chrome
console.log(__dirname)
console.log(path.join(__dirname, '../public')) //joins both content of __dirnaame and ../public ,to go up a folder use '..' so .. went to web-serer then /public to goto public folder
 //to create a new express application we call express()
const app = express()

const port = process.env.PORT || 3000

// app.com - root route

// app.com/help - /help route


const viewPath = path.join(__dirname, '../templates/views')

//for partials (eg. we are going to use single header page and use everywhere)
const partialPath = path.join(__dirname, '../templates/partials')

app.set('view engine', 'hbs') //to tell express which template engine we are using .views folder is always works when it is named only views it will fail in other case, i.e default location, but we can customise, we set path 
//handlebar setup done . now have to put all views(handlebar tmplates in a specific folder views in root of the project)

//defining path for express to go to templates instead of 'views'
app.set('views', viewPath)

//configure partials
hbs.registerPartials(partialPath)

//setup static directory
app.use(express.static(path.join(__dirname, '../public'))) //to customise the server
//this will redirect the index.html if you dont give '/index.html' path then also http://localhost will redirect to index.html
//given below routes will never work


// app.get('',(req, res)=>{
//     res.send('hello express!')
// }) //called when someone type root url

// app.get('/help',(req, res)=>{
//     res.send('<h1>HelpPage</h1>') //express will detect the html in stringz
// }) 
app.get('/weather',(req, res)=>{
    if(!req.query.address){
        return res.send({
            error:'you must have an address'
        })
    }
    
    geocode(req.query.address, (error, {latitude, longitude, location} = {})=>{ //assign to empty {} so that if you give ! in address in url, then it won't give error of 
    //Cannot destructure latitude of undefined or null.
     //so by defaulting destructuring parameters we making sure code won't break.
        if (error) {
            return res.send({error})
        }

        forecast(latitude, longitude, (error, forecastdata) => {
            if (error) {
                return res.send({error})
            }

            return res.send({
                location, 
                forecast:forecastdata,
                address:req.query.address
            })
        })
    })

    // res.send({
    //     forecast:'it is raining', 
    //     location:'kharagpur',
    //     address:req.query.address
    // }) //in send()  we can send string, json, html 
})

app.get('/about',(req, res)=>{
    res.render('about',{
        title:'about',
        name:'hemu'
    }) //in send()  we can send string, json, html 
})


// this called as route handler
app.get('', (req, res)=>{
    res.render('index',{
        title:'waether',
        name:'hemu'
    }) // we can render one of our views/handlebar template
})

app.get('/products', (req, res)=>{
    if(!req.query.search)
    {
        return res.send({ //// if we return then below written code won't execute , 
        //if we dont put return statement then .. this route will send res 2 times which generated error 'Cannot set headers after they are sent to the client.'
       
        error: 'you must provide a search term.'
        })     
    }
    res.send({
        products:[]
    }) 
})


app.get('/about/*', (req, res)=>{
    res.render('404',{
        title:'404',
        errorMessage:'About page not found'
    }) 
})

//this route handler is for redirecting to 404page if anybody types url which not present.. default we get 'cannot get /go ' like message which is generated by express
app.get('*', (req, res)=>{// * match anything which isnt listed up above
    res.render('404',{
        title:'404',
        errorMessage:'Page not found'
    }) // this should be at last becoz express 1 sequentially for a match and when it finds a match it will not go futher
})


//to start server and to make it listen on specific port
app.listen(port, ()=>{
    //on port 3000 
    console.log('server is up on'+port)
})